Go does not have classes. However, you can define methods on types.

A METHOD IS JUST A FUNCTION WITH A RECIEVER ARGUMENT.

The receiver appears in its own argument list between the func keyword and the method name.

In this example, the Abs method has a receiver of type Vertex named v.


In simple words a method is a named function

<!-- example of a method-->

type Calc struct{
	X, Y float64
}


func (c Calc) Example() float64{
    return maths.Abs(c.X + c.Y)
}

it takes a type of Calc and return the total value

<!-- This can be called from the method name  after assigning a value to Calc type-->

c.Example()



<!-- Method continued  -->

You can declare a method on non-struct types, too.

In this example we see a numeric type MyFloat with an Abs method.

You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as int).



Choosing a value or pointer receiver
There are two reasons to use a pointer receiver.

The first is so that the method can modify the value that its receiver points to.

The second is to avoid copying the value on each method call. This can be more efficient if the receiver is a large struct, for example.

In this example, both Scale and Abs are methods with receiver type *Vertex, even though the Abs method needn't modify its receiver.

In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both. (We'll see why over the next few pages.)